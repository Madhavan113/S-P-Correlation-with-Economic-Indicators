---
title: "S&P 500 and economic indicators"
format: html
execute:
  echo: false
message: false
---

"The question remains, how do macroeconomic indicators effect the micro economy, the project seeks to answer the question of how individual firms respond to economic indicators of strength or weakness"

```{r}
options(repos = c(CRAN = "https://cloud.r-project.org"))

install.packages(c("quantmod", "tidyverse", "data.table"))
library(quantmod)
library(tidyverse)
library(data.table)
```
```{r}
# Get S&P 500 data from Yahoo Finance

getSymbols("^GSPC", src = "yahoo", from = "1974-01-01", to = Sys.Date())
sp500_data <- data.frame(date = index(GSPC), coredata(GSPC))
```
```{r}
# Example: Download Consumer Price Index (CPI) data as a proxy for inflation
getSymbols("CPIAUCSL", src = "FRED", from = "1974-01-01", to = Sys.Date())
inflation_data <- data.frame(date = index(CPIAUCSL), coredata(CPIAUCSL))

# Example: Download Federal Funds Rate data
getSymbols("FEDFUNDS", src = "FRED", from = "1974-01-01", to = Sys.Date())
interest_rate_data <- data.frame(date = index(FEDFUNDS), coredata(FEDFUNDS))

```
```{r}
# Convert dates to Date type if necessary
sp500_data$date <- as.Date(sp500_data$date)
inflation_data$date <- as.Date(inflation_data$date)
interest_rate_data$date <- as.Date(interest_rate_data$date)

# Merge data into a single data frame
merged_data <- reduce(list(sp500_data, inflation_data, interest_rate_data), function(x, y) merge(x, y, by = "date", all = TRUE))

# Rename columns for clarity
colnames(merged_data) <- c("date", "SP500_Open", "SP500_High", "SP500_Low", "SP500_Close", "SP500_Volume", "SP500_Adjusted", "CPI", "Federal_Funds_Rate")

```

```{r}
  # Check for missing data
summary(merged_data)

# Handle missing data (example: fill forward method)
merged_data <- merged_data %>% fill(CPI, .direction = "down") %>% fill(Federal_Funds_Rate, .direction = "down")

```

```{r}
# Correlation analysis
correlation_matrix <- merged_data %>% select(-date) %>% cor(use = "complete.obs")
print(correlation_matrix)

# Plotting
ggplot(merged_data, aes(x = date)) +
  geom_line(aes(y = SP500_Close, color = "S&P 500")) +
  geom_line(aes(y = CPI, color = "CPI")) +
  geom_line(aes(y = Federal_Funds_Rate, color = "Federal Funds Rate")) +
  labs(title = "S&P 500 vs Economic Indicators", y = "Value", color = "Legend") +
  theme_minimal()

```
now that's not very useful is it, we seem to need to go into the short-term, to analyze the effects of these indicators.
We will choose dates of rates changes.

```{r}
# Get S&P 500 data from Yahoo Finance
getSymbols("^GSPC", src = "yahoo", from = "2000-01-01", to = Sys.Date())
sp500_data <- data.frame(date = index(GSPC), coredata(GSPC))

# Inspect column names of sp500_data
print(colnames(sp500_data))

# Download Federal Funds Rate data
getSymbols("FEDFUNDS", src = "FRED", from = "2000-01-01", to = Sys.Date())
interest_rate_data <- data.frame(date = index(FEDFUNDS), coredata(FEDFUNDS))


```

```{r}
# Identify dates when the Federal Funds Rate changed
interest_rate_data <- interest_rate_data %>%
  mutate(rate_change = c(NA, diff(FEDFUNDS))) %>%
  filter(!is.na(rate_change) & rate_change != 0) %>%
  select(date, FEDFUNDS, rate_change)

rate_change_dates <- interest_rate_data$date


```
```{r}
# Function to get S&P 500 performance around rate change dates
get_performance_around_date <- function(date, window = 30) {
  start_date <- date - window
  end_date <- date + window
  sp500_subset <- sp500_data %>%
    filter(date >= start_date & date <= end_date)
  
  sp500_subset %>%
    mutate(days_from_change = as.integer(date - date)) %>%
    select(date, days_from_change, GSPC.Close)
}

# Analyze S&P 500 performance around each rate change date
performance_data <- bind_rows(lapply(rate_change_dates, get_performance_around_date))

# Plotting the performance
ggplot(performance_data, aes(x = days_from_change, y = GSPC.Close, group = date)) +
  geom_line(alpha = 0.5) +
  labs(title = "S&P 500 Performance Around Federal Funds Rate Changes",
       x = "Days from Rate Change",
       y = "S&P 500 Close Price") +
  theme_minimal()

```



